name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y build-essential
          npm i -g pnpm
          pnpm install
      - name: Run tests
        run: |
          pnpm test

  build:
    runs-on: ubuntu-latest

    needs: test

    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y build-essential
          npm i -g pnpm
          pnpm install
      - name: Install git-chglog
        run: |
          wget https://github.com/git-chglog/git-chglog/releases/download/v0.15.4/git-chglog_0.15.4_linux_amd64.tar.gz -O /usr/local/bin/git-chglog
          chmod +x /usr/local/bin/git-chglog
      - name: Generate release notes and update CHANGELOG
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged && github.event.pull_request.base.ref == 'main'
        run: |
          git fetch --unshallow || true
          git-chglog -o CHANGELOG.md
          current_version=$(grep -Po '"version": "\K\d+\.\d+\.\d+' package.json)

          if grep -qE "^\s*feat" CHANGELOG.md; then
            new_version=$(semver --increment minor $current_version)
          elif grep -qE "^\s*fix" CHANGELOG.md; then
            new_version=$(semver --increment patch $current_version)
          else
            new_version=$current_version
          fi

          sed -i -E "s/\"version\": \"[0-9]+\.[0-9]+\.[0-9]+\"/\"version\": \"$new_version\"/" package.json

          git add CHANGELOG.md package.json
          git commit -m "chore(release): $new_version [skip ci]"
          git push origin HEAD:main
      - name: Get current version
        id: get_version
        run: echo "::set-env name=PACKAGE_VERSION::$(node -p -e "require('./package.json').version")"
        shell: bash
      - name: Set previous version
        id: set_previous_version
        run: echo "::set-env name=PREVIOUS_VERSION::$(git describe --tags --abbrev=0)"
        shell: bash
      - name: Bump version
        id: bump_version
        run: |
          npx semver --increment ${{ env.BUMP_TYPE }} ${{ env.PACKAGE_VERSION }} --preid=beta.${{ github.run_number }} -i -f -p 'beta' > version.txt
          echo "::set-env name=NEW_VERSION::$(cat version.txt)"
        shell: bash
      - name: Update package.json
        run: |
          npm version --no-git-tag-version $(cat version.txt)
        shell: bash
      - name: Create a new release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ env.NEW_VERSION }}
          release_name: Release ${{ env.NEW_VERSION }}
          body: |
            ${{ steps.generate_release_notes.outputs.release_notes }}
          draft: false
          prerelease: false

  deploy:
    runs-on: ubuntu-latest

    needs: build

    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y build-essential
          npm i -g pnpm
          pnpm install
      - name: Deploy to Vercel
        run: |
          vercel --token ${{ secrets.VERCEL_TOKEN }} --prod
